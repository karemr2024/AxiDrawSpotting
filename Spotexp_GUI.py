# -*- coding: utf-8 -*-

#user input (goto)

# Form implementation generated from reading ui file 'Spotexp_GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.Qt import Qt
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from functools import partial
from pathlib import Path
import sys
import pickle
import os
import math
import decimal
from pyaxidraw import axidraw

#I had to add this for myself - Emre
file_dir = os.path.dirname("/Users/emre/Desktop/AxiDraw/Spotting_Exp-main/ModifyWindow_GUI.py")
sys.path.append(file_dir)

from ModifyWindow_GUI import Ui_ModifyWindow

# makes GUI correct size for higher screen resolution

QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling, True)

# Set up the main GUI window
class Ui_SpottingExp(QMainWindow):

    #Set up buttons and widgets
    def setupUi(self, SpottingExp):
        self.connection = False              # variable to see the connection status of the axidraw

        self.ad = axidraw.AxiDraw()          # Initialize class
        self.ad.interactive()                # Enter interactive context
        self.ad.options.units = 2            # change units to centimeters

        SpottingExp.setObjectName("SpottingExp")
        SpottingExp.resize(680, 400)
        SpottingExp.setWindowOpacity(1)
        self.centralwidget = QtWidgets.QWidget(SpottingExp)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 0, 281, 51))
        font_16 = QtGui.QFont()
        font_16.setFamily("Arial")
        font_16.setPointSize(16)
        self.label.setFont(font_16)
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(10, 50, 75, 23))
        font_10 = QtGui.QFont()
        font_10.setFamily("Arial")
        font_10.setPointSize(10)
        self.pushButton.setFont(font_10)
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(100, 50, 75, 23))
        self.pushButton_2.setFont(font_10)
        self.pushButton_2.setObjectName("pushButton_2")

        font_12 = QtGui.QFont()
        font_12.setFamily("Arial")
        font_12.setPointSize(12)

        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(560, 50, 81, 31))
        self.pushButton_3.setFont(font_12)
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(560, 90, 81, 31))
        self.pushButton_4.setFont(font_12)
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(560, 130, 81, 31))
        self.pushButton_8.setFont(font_12)
        self.pushButton_8.setObjectName("pushButton_8")

        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(190, 50, 171, 23))
        self.pushButton_5.setFont(font_10)
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(560, 330, 81, 31))
        font_bold12 = QtGui.QFont()
        font_bold12.setFamily("Arial")
        font_bold12.setPointSize(12)
        font_bold12.setBold(True)
        font_bold12.setWeight(75)
        self.pushButton_6.setFont(font_bold12)
        self.pushButton_6.setObjectName("pushButton_6")
        self.pushButton_10 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_10.setGeometry(QtCore.QRect(560, 290, 81, 31))
        self.pushButton_10.setFont(font_12)
        self.pushButton_10.setObjectName("pushButton_10")

        SpottingExp.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(SpottingExp)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 578, 22))
        self.menubar.setObjectName("menubar")
        SpottingExp.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(SpottingExp)
        self.statusbar.setObjectName("statusbar")
        SpottingExp.setStatusBar(self.statusbar)

        self.pushButton_DIP = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_DIP.setGeometry(QtCore.QRect(560, 210, 81, 31))
        self.pushButton_DIP.setFont(font_12)
        self.pushButton_DIP.setObjectName("pushButton_DIP")

        self.sampleno_DIP = QtWidgets.QComboBox(self.centralwidget)
        self.sampleno_DIP.addItems([" 1 ", " 2 ", " 3 "])
        self.sampleno_DIP.setGeometry(QtCore.QRect(520, 210, 40, 31))
        self.sampleno_DIP.setFont(font_12)
        self.sampleno_DIP.setObjectName("sampleno_DIP")

        self.pushButton_CLT = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_CLT.setGeometry(QtCore.QRect(560, 250, 81, 31))
        self.pushButton_CLT.setFont(font_12)
        self.pushButton_CLT.setObjectName("pushButton_CLT")

        self.spinBox_goPosx = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.spinBox_goPosx.setGeometry(QtCore.QRect(100, 300, 47, 31))
        self.spinBox_goPosx.setFont(font_12)
        self.spinBox_goPosx.setMinimum(0)
        self.spinBox_goPosx.setMaximum(150)
        self.spinBox_goPosx.setProperty("value", 0)
        self.spinBox_goPosx.setObjectName("spinBox_goPosx")

        self.spinBox_goPosy = QtWidgets.QDoubleSpinBox(self.centralwidget)
        self.spinBox_goPosy.setGeometry(QtCore.QRect(150, 300, 47, 31))
        self.spinBox_goPosy.setFont(font_12)
        self.spinBox_goPosy.setMinimum(0)
        self.spinBox_goPosy.setMaximum(150)
        self.spinBox_goPosy.setProperty("value", 0)
        self.spinBox_goPosy.setObjectName("spinBox_goPosy")

        self.pushButton_GoTo = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_GoTo.setGeometry(QtCore.QRect(10, 300, 75, 23))
        self.pushButton_GoTo.setFont(font_10)
        self.pushButton_GoTo.setObjectName("pushButton_GoTo")

        self.retranslateUi(SpottingExp)

        QtCore.QMetaObject.connectSlotsByName(SpottingExp)

        # Connect buttons to events and functions
        self.pushButton.clicked.connect(self.connectAxi)
        self.pushButton_3.clicked.connect(lambda: self.ad.penup())
        self.pushButton_4.clicked.connect(lambda: self.ad.pendown())
        self.pushButton_8.clicked.connect(lambda: self.ad.goto(0, 0))
        #self.pushButton_9.clicked.connect(self.updateSettings)
        self.pushButton_2.clicked.connect(self.disconnectAxi)
        self.pushButton_5.clicked.connect(self.CircleChip)
        #self.pushButton_7.clicked.connect(self.moveto_xy)
        self.pushButton_6.clicked.connect(self.runSpotter)
        # modifySettings will be a function that brings the user to a pop up
        # window where they can specify how many rows of spots they want and
        # how many columns they want of each pen delay.
        # It's a work in progress srry. LMK if it's nice tho.
        self.pushButton_10.clicked.connect(self.openModifyWin)

        self.pushButton_DIP.clicked.connect(self.DipSample)
        self.sampleno_DIP.currentIndexChanged.connect(self.index_changed)

        self.pushButton_CLT.clicked.connect(self.ClearTip)

        self.pushButton_GoTo.clicked.connect(lambda: self.ad.goto(float(self.spinBox_goPosx.text()),float(self.spinBox_goPosy.text())))
    # adding text to all the buttons and labels <3
    def retranslateUi(self, SpottingExp):
        _translate = QtCore.QCoreApplication.translate
        SpottingExp.setWindowTitle(_translate("SpottingExp", "Spotting Experiment"))
        self.label.setText(_translate("SpottingExp", "AxiDraw Spotting Experiment"))
        self.pushButton.setText(_translate("SpottingExp", "Connect"))
        self.pushButton_2.setText(_translate("SpottingExp", "Disconnect"))

        self.pushButton_3.setText(_translate("SpottingExp", "Pen Up"))
        self.pushButton_4.setText(_translate("SpottingExp", "Pen Down"))

        self.pushButton_5.setText(_translate("SpottingExp", "Draw Placement Box"))
        self.pushButton_6.setText(_translate("SpottingExp", "Spot!"))
        self.pushButton_10.setText(_translate("SpottingExp", "Modify"))

        self.pushButton_8.setText(_translate("SpottingExp", "Home"))

        self.pushButton_DIP.setText(_translate("SpottingExp", "Dip"))
        self.pushButton_CLT.setText(_translate("SpottingExp", "Clear Tip"))

        self.pushButton_GoTo.setText(_translate("SpottingExp", "Go To (x,y)"))

    # connect AxiDraw if it isn't already connected.
    def connectAxi(self):
        if self.connection == False:
            self.ad.connect()
            self.connection = True
            msg = QMessageBox()
            msg.setWindowTitle("Connection Status")
            msg.setText("AxiDraw is now connected.")
            msg.setStandardButtons(QMessageBox.Ok)
            x = msg.exec_()
        elif self.connection == True:
            msg = QMessageBox()
            msg.setWindowTitle("Connection Status")
            msg.setText("AxiDraw is already connected.")
            msg.setStandardButtons(QMessageBox.Ok)
            x = msg.exec_()

    # disconnect Axidraw duh.
    def disconnectAxi(self):
        if self.connection == True:
            self.ad.disconnect()
            self.connection = False
            msg = QMessageBox()
            msg.setWindowTitle("Connection Status")
            msg.setText("AxiDraw is now disconnected.")
            msg.setStandardButtons(QMessageBox.Ok)
            x = msg.exec_()
        elif self.connection == False:
            msg = QMessageBox()
            msg.setWindowTitle("Connection Status")
            msg.setText("AxiDraw is already disconnected.")
            msg.setStandardButtons(QMessageBox.Ok)
            x = msg.exec_()

    # move to the position you indicate
    def moveto_xy(self):
        x_pos = float(self.lineEdit_1.text())
        y_pos = float(self.lineEdit_2.text())
        print(x_pos)
        print(y_pos)
        self.ad.moveto(x_pos, y_pos) # move to the position indicated by the user

    # update the settings of the AxiDraw when changing the pen position
    #def updateSettings(self):
    #    if self.connection == False:
    #        msg = QMessageBox()
    #        msg.setWindowTitle("Connection Status")
    #        msg.setText("Please connect the AxiDraw.")
    #        msg.setStandardButtons(QMessageBox.Ok)
    #        x = msg.exec_()

    #        penPosUp = int(self.spinBox_7.text())
    #        penPosDown = int(self.spinBox_8.text())
    #        print(penPosUp)
    #        print(type(penPosUp))

    #        self.ad.update()
    #        msg = QMessageBox()
    #        msg.setWindowTitle("Pen Pos")
    #        msg.setText("Pen positions have been updated.")
    #        msg.setStandardButtons(QMessageBox.Ok)
    #        x = msg.exec_()
    #        return

    # Here's the good stuff. This is the function that actually runs the
    # spotting experiment. You can change things manually about your rows and
    # columns here.

    def runSpotter(self):
        self.ad.options.pen_pos_up = self.ui.ppu
        self.ad.options.pen_pos_down = self.ui.ppd
        #self.ad.goto(self.ui.startpx, self.ui.startpy)
        if self.connection == False:
            msg = QMessageBox()
            msg.setWindowTitle("Connection Status")
            msg.setText("Please connect the AxiDraw.")
            msg.setStandardButtons(QMessageBox.Ok)
            x = msg.exec_()

        #self.DipSample()
        #self.ad.goto(self.ui.startpx + int(self.spinBox_goPosx.text()), self.ui.startpy + int(self.spinBox_goPosy.text()))
        n = 0
        def makeRow(self):
            self.ad.update()
            for i in range(self.ui.colNum):
                self.DipSample()
                self.ad.goto(self.ui.startpx+((i-1)*self.ui.colDisp)+ float(self.spinBox_goPosx.text()), self.ui.startpy+((n-1)*self.ui.rowDisp)+ float(self.spinBox_goPosy.text()))
                self.ad.pendown()
                self.ad.penup()
                self.ad.go(self.ui.colDisp, 0)
                #self.ad.goto(self.ui.startpx + (i-1)*self.ui.colDisp,0)

            self.ad.go((-self.ui.colNum)*(self.ui.colDisp), self.ui.rowDisp)

        for i in range(self.ui.rowNum):

            self.ad.options.pen_delay_down = self.ui.pdd
            self.ad.options.pen_delay_up = self.ui.pdu

            makeRow(self)
            n+=1

        #self.ClearTip()
        self.ad.goto(float(self.spinBox_goPosx.text()), float(self.spinBox_goPosy.text()))

    # function that will draw a box with the exact dimensions of the chip
    # so you can place it on paper or whatever.
    def DrawChip(self):
        if self.connection == False:
            msg = QMessageBox()
            msg.setWindowTitle("Connection Status")
            msg.setText("Please connect the AxiDraw.")
            msg.setStandardButtons(QMessageBox.Ok)
            x = msg.exec_()
        else:
            for i in range(2):
                self.ad.pendown()
                self.ad.go(2.5, 0)
                self.ad.go(0, 1.2)
                self.ad.go(-2.5, 0)
                self.ad.go(0, -1.2)
            self.ad.penup()
            self.ad.goto(0, 0)

    def CircleChip(self):
        if self.connection == False:
            msg = QMessageBox()
            msg.setWindowTitle("Connection Status")
            msg.setText("Please connect the AxiDraw.")
            msg.setStandardButtons(QMessageBox.Ok)
            x = msg.exec_()
        else:
            self.ad.penup()
            self.ad.goto(float(self.spinBox_goPosx.text()), float(self.spinBox_goPosy.text()))
            for k in range(2):
                for i in range(3):
                    self.ad.goto(10,40)
                    self.ad.pendown()
                    self.ad.penup()
                    #self.ad.goto(int(self.spinBox_goPosx.text())+.18+(i*.2), int(self.spinBox_goPosy.text())+.12+((k-1)*.2))
                    self.ad.goto(float(self.spinBox_goPosx.text())+4+(i*4), float(self.spinBox_goPosy.text())+7.4+((k-1)*4))
                    self.ad.pendown()
                    for t in range(20):
                        x = math.cos(t/3.14)/4.2
                        y = math.sin(t/3.14)/4.2
                        self.ad.go(x,y)
                    self.ad.penup()
                    #self.ad.go(.2,0)
                    self.ad.go(4,0)
                #self.ad.goto(int(self.spinBox_goPosx.text())+.18, int(self.spinBox_goPosy.text())+.12+(k*.2))
                self.ad.goto(float(self.spinBox_goPosx.text())+4, float(self.spinBox_goPosy.text())+7.4+(k*4))
            self.ad.penup()
            self.ad.goto(0, 0)



    def index_changed(self, i): # i is an int for the dip sample
        if i == 0:
            self.dipPosx = self.ui.dipPosx1
            self.dipPosy = self.ui.dipPosy1
        elif i == 1:
            self.dipPosx = self.ui.dipPosx2
            self.dipPosy = self.ui.dipPosy2
        elif i == 2:
            self.dipPosx = self.ui.dipPosx3
            self.dipPosy = self.ui.dipPosy3

    def DipSample(self):
        self.ad.options.pen_pos_up = self.ui.ppu
        self.ad.options.pen_pos_down = self.ui.ppd
        self.ad.update()
        if self.connection == False:
            msg = QMessageBox()
            msg.setWindowTitle("Connection Status")
            msg.setText("Please connect the AxiDraw.")
            msg.setStandardButtons(QMessageBox.Ok)
            x = msg.exec_()
        else:
            self.ad.penup()
            self.ad.goto(self.dipPosx,self.dipPosy)
            self.ad.pendown()
            self.ad.penup()
            self.ad.goto(self.ui.startpx + float(self.spinBox_goPosx.text()), self.ui.startpy + float(self.spinBox_goPosy.text()))

    def ClearTip(self):
        if self.connection == False:
            msg = QMessageBox()
            msg.setWindowTitle("Connection Status")
            msg.setText("Please connect the AxiDraw.")
            msg.setStandardButtons(QMessageBox.Ok)
            x = msg.exec_()
        else:
            self.ad.penup()
            self.ad.goto(0,3)
            self.ad.pendown()
            self.ad.penup()
            self.ad.goto(0,0)

    def openModifyWin(self):
        if self.connection == False:
            msg = QMessageBox()
            msg.setWindowTitle("Connection Status")
            msg.setText("Please connect the AxiDraw.")
            msg.setStandardButtons(QMessageBox.Ok)
            x = msg.exec_()
        else:
            self.window = QtWidgets.QMainWindow()
            self.ui = Ui_ModifyWindow()
            self.ui.setupUi(self.window)
            self.window.show()


# close gui
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    SpottingExp = QtWidgets.QMainWindow()
    ui = Ui_SpottingExp()
    ui.setupUi(SpottingExp)
    SpottingExp.show()
    sys.exit(app.exec_())
